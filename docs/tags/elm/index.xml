<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>elm on Michael Claybaugh</title>
    <link>https://michaelclaybaugh.com/tags/elm/</link>
    <description>Recent content in elm on Michael Claybaugh</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Fri, 23 Nov 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://michaelclaybaugh.com/tags/elm/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vanillajs to React to Elm</title>
      <link>https://michaelclaybaugh.com/posts/vanillajs-to-react-to-elm/</link>
      <pubDate>Fri, 23 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>https://michaelclaybaugh.com/posts/vanillajs-to-react-to-elm/</guid>
      <description>Controlling a complicated UI is hard In the interest of simplicity, I have leaned towards writing plain ES5 JavaScript for my web projects. However, it is inevitable that situations arise with more complicated user interfaces where multiple components begin to depend on multiple other components, and writing the logic to control the parts becomes both tedious and prone to errors.
I encountered a problem like this when making a form where the first two select inputs combined determined which fields would show in the rest of the form.</description>
    </item>
    
  </channel>
</rss>